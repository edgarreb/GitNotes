initializing: 

There are two ways in which we can create a new git repository. We can either manouver to the directory that we would like to initialize (in our local machine), or we can clone an existing git repository.

- initializing a local git repository
	$ git init 


At this point we have created a new git repo. When we commit and later push our updates to a remote repo on Github we may not want to push (or "keep track of") certian files. As an example when we compile our C source code we don't want to push our executable file (a.out). To stop tracking files we can create a .gitignore file in which we include the name of files or folders that we wouldn't like to ignore. 





Staging:

- Staging a single file 
	$ git add <Filename>

- Staging all untracked/changed files 
	$ git add .

- Removing a file from the staging area
	$ git rm --cahced <Filename> 
	This command will remove a file that has already been staged.





Commit:

- Commiting changes to the repo (with a message)
	$ git commit -m 'message'
	Making a commit in git is like hiting the "save button".

- Checkout commit
	$ git checkout <commitID>
	This will checkout a particular commit (allow us to see the code from a prior point in history). Once we are done checking out the code we can go back to our most recent commit by checking out the master branch ($ git checkout master).	 

- Revert Commit 
	$ git revert <commitID>
	This command will revert changes made from a certian commit and make a new commit (at the top of the commit history) with the changes undone. We casn still access the reverted commit but the changes made at this reverted commit will not be present at the most recent commit. 

- Reset Commit
	$ git reset <commitID>
	This command will delete commits from the commit history. The files that were from commits coming after the reset commit will still be in our editor but will not be staged. 
	
	$ git reset <commitID> --hard
	This command does the same thing as the reset commit above, however the files after the reset commit will no longer be in our text editor (or working directory). 

- Keeping track of commits 
	$ git log 
	This command will show us a list of commits made in the repo.
	
	$ git log --oneline
	This will show a more condensed version of the commit history. 

	Each commit in the commit history has a unique commit ID, this ID is used to go back (checkout/revert/reset) to a previous commit. 






Push/Pull:




Branching:

- Creating a new branch
	$ git branch <BranchName>  

- Creating and checking out a branch 
	$ git checkout -b <BranchName>
	This command will create a new branch and checkout (or change us to) the new branch.

- Tracking branch info
	$ git branch -a 
	This will show us all the branches in our repo as well as tell us the branch that we are currently on. 

- Changing branches
	$ git checkout <NameOfBranch> 

- Deleting a branch
	$ git branch -D <BranchName>
	This command will delete a branch that has not yet been meregd back into origin.

	$ git branch -d <BranchName>
	This command will delete a branch that has already been merged back into origin. 





Merging:

- Merging a branch 
	$ git merge <BranchName>
	(important) To merge a branch into another we have to be on the branch that we want to merge into.


